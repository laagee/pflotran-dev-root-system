module Test_Utility_module

  use pFUnit_mod

  implicit none

#include "finclude/petscsys.h"

  public :: Test_Utility

  interface Test_Utility
     module procedure newTest_Utility
  end interface Test_Utility

  @TestCase
  type, extends(TestCase) :: Test_Utility
     procedure(runMethod), pointer :: userMethod => null()
   contains
     procedure :: setUp
     procedure :: tearDown
     procedure :: runMethod
  end type Test_Utility

contains

! ************************************************************************** !

  function newTest_Utility(name, userMethod) result(test)

    implicit none

    character(len=*), intent(in) :: name
    procedure(runMethod) :: userMethod

    type(Test_Utility) :: test

    call test%setName(name)
    test%userMethod => userMethod

  end function newTest_Utility

! ************************************************************************** !

  subroutine setUp(this)
    implicit none
    class (Test_Utility), intent(inout) :: this
    ! Init objects and common setup routines go here
  end subroutine setUp

! ************************************************************************** !

  subroutine tearDown(this)
    implicit none
    class (Test_Utility), intent(inout) :: this
    ! destroy routines go here
  end subroutine tearDown

! ************************************************************************** !

  subroutine runMethod(this)
    implicit none
    class (Test_Utility), intent(inout) :: this
    call this%userMethod()
  end subroutine runMethod

! ************************************************************************** !

  @Test
  subroutine testUtility_InterpolateMiddle(this)
    !
    ! Verify that the linear interpolation returns the correct value
    ! for the middle of the range.
    !

    use Utility_module, only : Interpolate

    implicit none

    class (Test_Utility), intent(inout) :: this

    PetscReal, parameter :: x_low = 1.0d0
    PetscReal, parameter :: x_high = 2.0d0
    PetscReal, parameter :: x = 1.5d0
    PetscReal, parameter :: y_low = 100.0d0
    PetscReal, parameter :: y_high = 110.0d0
    PetscReal :: y

    call Interpolate(x_high, x_low, x, y_high, y_low, y)

    @assertEqual(y, 105.0d0, 1.0d-16)

  end subroutine testUtility_InterpolateMiddle

! ************************************************************************** !

  @Test
  subroutine testUtility_InterpolateXSame(this)
    !
    ! Verify that the linear interpolation returns y_low when x_high ~= x_low
    !

    use Utility_module, only : Interpolate

    implicit none

    class (Test_Utility), intent(inout) :: this

    PetscReal, parameter :: x_low = 1.0d0
    PetscReal, parameter :: x_high = 1.0000000000001d0
    PetscReal, parameter :: x = 1.00000000000005d0
    PetscReal, parameter :: y_low = 100.0d0
    PetscReal, parameter :: y_high = 110.0d0
    PetscReal :: y

    call Interpolate(x_high, x_low, x, y_high, y_low, y)

    @assertEqual(y, y_low, 1.0d-16)

  end subroutine testUtility_InterpolateXSame

! ************************************************************************** !

  @Test
  subroutine testUtility_InterpolateExtrapolateLow(this)
    !
    ! Verify that the linear interpolation extrapolates correctly for x < x_low
    !

    use Utility_module, only : Interpolate

    implicit none

    class (Test_Utility), intent(inout) :: this

    PetscReal, parameter :: x_low = 1.0d0
    PetscReal, parameter :: x_high = 2.0d0
    PetscReal, parameter :: x = -1.0d0
    PetscReal, parameter :: y_low = 100.0d0
    PetscReal, parameter :: y_high = 110.0d0
    PetscReal :: y

    call Interpolate(x_high, x_low, x, y_high, y_low, y)

    @assertEqual(y, 80.0d0, 1.0d-16)

  end subroutine testUtility_InterpolateExtrapolateLow

! ************************************************************************** !

  @Test
  subroutine testUtility_InterpolateExtrapolateHigh(this)
    !
    ! Verify that the linear interpolation extrapolates correctly for x > x_high
    !

    use Utility_module, only : Interpolate

    implicit none

    class (Test_Utility), intent(inout) :: this

    PetscReal, parameter :: x_low = 1.0d0
    PetscReal, parameter :: x_high = 2.0d0
    PetscReal, parameter :: x = 3.0d0
    PetscReal, parameter :: y_low = 100.0d0
    PetscReal, parameter :: y_high = 110.0d0
    PetscReal :: y

    call Interpolate(x_high, x_low, x, y_high, y_low, y)

    @assertEqual(y, 120.0d0, 1.0d-16)

  end subroutine testUtility_InterpolateExtrapolateHigh

end module Test_Utility_module

